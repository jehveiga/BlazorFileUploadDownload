@page "/games"
@using BlazorFileUploadDownload.Services
@using System.Text
@inject IJSRuntime jsRuntime
@inject ApplicationDbContext appDbContext
@rendermode @(new InteractiveServerRenderMode(prerender: true))
<PageTitle>Produtos</PageTitle>

<div class="card mb-2">
    <div class="card-body d-flex flex-row">
        <span class="flex-fill fw-bolder text-end p-1 me-lg-3">Upload CSV</span>
        <InputFile class="form-control form-control-sm w-25" OnChange="HandleFileUpload"></InputFile>
    </div>
</div>

<div class="card">
    <div class="card-body p-0">
        <div class="card-header d-flex flex-row">
            <span class="flex-fill fw-bolder text-center">Games</span>

            <button type="button" class="btn btn-sm btn-primary" @onclick="DownloadGames">
                <i class="bi bi-download me-1"></i>
                Download
            </button>
        </div>
        <table class="table table-striped mb-0">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Nome</th>
                    <th>Preço</th>
                </tr>
            </thead>
            <tbody>
                @if (games is null)
                {
                    <tr>
                        <td class="text-center" colspan="4">
                            Loading...
                        </td>
                    </tr>
                }
                else if (!games.Any())
                {
                    <tr>
                        <td class="text-center" colspan="4">
                            Não tem produtos adicionados
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var game in games)
                    {
                        <tr>
                            <td>@game.Id </td>
                            <td>@game.Nome </td>
                            <td>@game.Preco.ToString("F2") </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {

    public class GameMap : ClassMap<Game>
    {
        public GameMap()
        {
            Map(m => m.Nome);
            Map(m => m.Preco);
        }
    }

    IEnumerable<Game> games = Enumerable.Empty<Game>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadGames();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (e.File is not null)
        {
            try
            {
                var file = e.File;

                var games = await CsvService.LerCsvAsync(file);

                await appDbContext.Games.AddRangeAsync(games);
                await appDbContext.SaveChangesAsync();
                await LoadGames();
                await jsRuntime.InvokeVoidAsync("alert", "Games adicionados com sucesso!");

            }
            catch (Exception ex)
            {
                await jsRuntime.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }

    public async Task LoadGames()
    {
        games = await appDbContext.Games.ToListAsync();
    }

    private async Task DownloadGames()
    {
        try
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    HasHeaderRecord = true,
                    Encoding = Encoding.UTF8
                };
            using (var memoryStream = new MemoryStream())
            using (TextWriter textWriter = new StreamWriter(memoryStream))
            using (var csvWrite = new CsvWriter(textWriter, config))
            {
                csvWrite.WriteRecords(games);

                textWriter.Flush();
                memoryStream.Seek(0, SeekOrigin.Begin);
                using var streamRef = new DotNetStreamReference(memoryStream);

                // Função criada em JavaScript que será chamada para efetuar o download da planilha com os dados passados no parametro
                await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "games.csv", streamRef);
            }
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
